- name: Derive PV from application PVC
  shell: >
    kubectl get pvc {{ app_pvc }}
    -o custom-columns=:spec.volumeName -n {{ app_ns }}
    --no-headers
  args:
    executable: /bin/bash
  register: pv

- name: Get istgt target pod details
  shell: kubectl get pods  -l openebs.io/persistent-volume-claim="{{ APP_PVC }}" -n {{ operator_ns }} -o custom-columns=:metadata.name --no-headers
  register: istgt_replica

- name: Get Application  pod details
  shell: kubectl get pods -n {{ app_ns }}  -l {{ APP_LABEL }}  --no-headers -o custom-columns=:metadata.name
  register: app_pod

- name: Create an empty list of replica pods.
  set_fact:
     cstor_replicas_pod : []

- block:
    - name: Obtaining the storage class used from PVC
      shell: kubectl get pvc {{ pvc }} -n {{ app_ns }} --no-headers -o custom-columns=:.spec.storageClassName
      register: app_sc

    - name: Obtaining the SPC from storage class
      shell: kubectl get sc {{ app_sc.stdout }} --no-headers  -o yaml | awk '/StoragePoolClaim/{getline; print}' | cut -d ':' -f2 | sed 's/"//g'
      register: spc

    - name: Obtaining the pool deployments from cvr
      shell: >
        kubectl get cvr -n {{ operator_ns }}
        -l openebs.io/persistent-volume={{ pv.stdout }} --no-headers
        -o=jsonpath='{range .items[*]}{.metadata.labels.cstorpool\.openebs\.io\/name}{"\n"}{end}'
      args:
        executable: /bin/bash
      register: pool_deployment

    - name: Obtaining the replicasets corresponding to pool deployements.
      shell: >
        kubectl get rs --selector=app=cstor-pool -n {{ operator_ns }} --no-headers
        -o=jsonpath='{.items[?(@.metadata.ownerReferences[0].name=="{{item}}")].metadata.name}'
      register: rs_list
      with_items:
        - "{{ pool_deployment.stdout_lines }}"

    - name: Obtaining the pool pods
      shell: >
        kubectl get pod --selector=app=cstor-pool -n {{ operator_ns }} --no-headers
        -o=jsonpath='{.items[?(@.metadata.ownerReferences[0].name=="{{item.stdout}}")].metadata.name}'
      register: pool_pods
      with_items:
        - "{{ rs_list.results }}"

    - name: Build a list of replica pods
      set_fact:
        cstor_replicas_pod : "{{ cstor_replicas_pod }} + [ '{{ item.stdout }}' ]"
      with_items: "{{ pool_pods.results }}"

#Select any cstor replica pod to inject packet loss
- set_fact:
    targeted_replica_pod: "{{ cstor_replicas_pod | list | first }}"

- name: Install tc command on targeted replica pod
  shell: kubectl exec -it {{ targeted_replica_pod }} -n {{ operator_ns }} --container cstor-pool -- bash -c "apt-get update && apt-get -y install iproute2"
  register: tc_apt_output

- name: Inject packet loss on targeted replica
  shell: kubectl exec -it {{ targeted_replica_pod }} -n {{ operator_ns }} --container cstor-pool -- bash -c "tc qdisc add dev eth0 root netem loss 100.00"
  register: tc_output

- name: Check if targeted replica is disconnected
  shell: kubectl exec -it {{ istgt_replica.stdout }} -n {{ operator_ns }} --container  cstor-istgt -- istgtcontrol -q replica |json_pp |grep "\"replicaId" |awk -F ':' '{print $2}' | tr -d ',' |wc -l
  register: connected_replica
  until: "connected_replica.stdout == \"2\""
  delay: 30
  retries: 10

- name: Get current iostats from target
  shell: kubectl exec -it {{ istgt_replica.stdout }} -n {{ operator_ns }} --container cstor-istgt -- istgtcontrol -q iostats |json_pp| grep WriteIOPS |awk -F ':' '{print $2}' | tr -d -c 0-9
  register: last_iostats

- name: Generate database name
  shell: cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1
  register: new_db_name

- name: Create new database in the mysql
  include_tasks: "/common/utils/mysql_data_persistence.yml"
  vars:
    status: 'LOAD'
    #ns: "app-percona-ns"
    #pod_name: "percona-786c6b7c7f-7qkxm"
    ns: "{{ app_ns }}"
    pod_name: "{{ app_pod.stdout }}"
    dbuser: 'root'
    dbpassword: 'k8sDem0'
    dbname: "{{ new_db_name.stdout }}"

- name: Check if target got any new write IOs
  shell: kubectl exec -it {{ istgt_replica.stdout }} -n {{ operator_ns }} --container cstor-istgt -- istgtcontrol -q iostats |json_pp| grep WriteIOPS |awk -F ':' '{print $2}' | tr -d -c 0-9
  register: iostats
  retries: 10
  delay: 3
  until: iostats.stdout != last_iostats.stdout

- name: Remove packet loss rule from targeted replica pod
  shell: kubectl exec -it {{ targeted_replica_pod }} -n {{ operator_ns }} --container cstor-pool -- bash -c "tc qdisc del dev eth0 root netem loss 100.00"
  register: apt_rc

- name: Wait until all replica gets connected
  shell: kubectl exec -it {{ istgt_replica.stdout }} -n {{ operator_ns }} --container  cstor-istgt -- istgtcontrol -q replica |json_pp |grep "\"replicaId" |awk -F ':' '{print $2}' | tr -d ',' |wc -l
  register: connected_replica
  until: "connected_replica.stdout == \"3\""
  delay: 30
  retries: 10

- name: Wait until all replica becomes healthy
  shell: kubectl exec -it {{ istgt_replica.stdout }} -n {{ operator_ns }} --container  cstor-istgt -- istgtcontrol -q replica |json_pp |grep "\"status" |awk -F ':' '{print $2}' | tr -d ','
  register: replica_status
  until: replica_status.stdout.find("Degraded") == -1
  retries: 50
  delay: 10

- name: Generate snapshot name
  shell: cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1
  register: snapname

- set_fact:
    snap_name: "{{ snapname.stdout }}"

- name: Take snapshot for data verification
  shell: kubectl exec -it {{ istgt_replica.stdout }} -n {{ operator_ns }} --container  cstor-istgt -- istgtcontrol snapcreate {{ pv.stdout }} {{ snap_name }} 30 30
  register: snap_status

- block:
    - name: Install netcat on current host
      shell: apt-get update && apt-get -y install netcat iproute2
      register: dataset

    - include: fetch_data_from_replica.yml
      loop: "{{ cstor_replicas_pod }}"
      loop_control:
        loop_var: rpod

    - set_fact:
        base_replica: "{{ cstor_replicas_pod | list | first }}"

    - name: compare data object
      shell: diff {{ rpod }}.1.dump {{ base_replica }}.1.dump
      loop: "{{ cstor_replicas_pod }}"
      loop_control:
        loop_var: rpod

    - name: compare meta data object
      shell: diff {{ rpod }}.3.dump {{ base_replica }}.3.dump
      loop: "{{ cstor_replicas_pod }}"
      loop_control:
        loop_var: rpod

- name: Destroy snapshot created for data verification
  shell: kubectl exec -it {{ istgt_replica.stdout }} -n {{ operator_ns }} --container  cstor-istgt -- istgtcontrol snapdestroy {{ pv.stdout }} {{ snap_name }} 30 30
  register: snap_status
