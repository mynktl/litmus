- name: Derive PV from application PVC
  shell: >
    kubectl get pvc {{ app_pvc }}
    -o custom-columns=:spec.volumeName -n {{ app_ns }}
    --no-headers
  args:
    executable: /bin/bash
  register: pv

- name: Get istgt target pod details
  shell: kubectl get pods  -l openebs.io/persistent-volume-claim="{{ APP_PVC }}" -n {{ operator_ns }} -o custom-columns=:metadata.name --no-headers
  register: istgt_pod

- name: Get Application  pod details
  shell: kubectl get pods -n {{ app_ns }}  -l {{ APP_LABEL }}  --no-headers -o custom-columns=:metadata.name
  register: app_pod

- block:
    - name: Obtaining the storage class used from PVC
      shell: kubectl get pvc {{ pvc }} -n {{ app_ns }} --no-headers -o custom-columns=:.spec.storageClassName
      register: app_sc

    - name: Obtaining the SPC from storage class
      shell: kubectl get sc {{ app_sc.stdout }} --no-headers  -o yaml | awk '/StoragePoolClaim/{getline; print}' | cut -d ':' -f2 | sed 's/"//g'
      register: spc

    - name: Obtaining the pool deployments from cvr
      shell: >
        kubectl get cvr -n {{ operator_ns }}
        -l openebs.io/persistent-volume={{ pv.stdout }} --no-headers
        -o=jsonpath='{range .items[*]}{.metadata.labels.cstorpool\.openebs\.io\/name}{"\n"}{end}'
      args:
        executable: /bin/bash
      register: pool_deployment

    - name: Obtaining the replicasets corresponding to pool deployements.
      shell: >
        kubectl get rs --selector=app=cstor-pool -n {{ operator_ns }} --no-headers
        -o=jsonpath='{.items[?(@.metadata.ownerReferences[0].name=="{{item}}")].metadata.name}'
      register: rs_list
      with_items:
        - "{{ pool_deployment.stdout_lines }}"

    - name: Obtaining the pool pods
      shell: >
        kubectl get pod --selector=app=cstor-pool -n {{ operator_ns }} --no-headers
        -o=jsonpath='{.items[?(@.metadata.ownerReferences[0].name=="{{item.stdout}}")].metadata.name}'
      register: pool_pods
      with_items:
        - "{{ rs_list.results }}"

    - name: Build a list of replica pods
      set_fact:
        cstor_replicas_pod : "{{ cstor_replicas_pod|default([]) + [ {'name': item.stdout } ] }}"
      with_items: "{{ pool_pods.results }}"

    - name: Obtaining the pool IP address
      shell: kubectl get pods {{ item.stdout }} -n openebs   -o=jsonpath='{.status.podIP}'
      register: pool_ip
      with_items:
        - "{{ rs_list.results }}"

    - name: Build a list of replica IPs
      set_fact:
        cstor_replicas_ip : "{{ cstor_replicas_ip|default([]) + [ {'name': item.stdout } ] }}"
      with_items: "{{ pool_ip.results }}"



####################################################################
- name: block replica 1 from target
  include_tasks: network_ops_on_pod.yaml
  vars:
    action: 'disconnect_target'
    targeted_replica_pod: cstor_replicas_pod[1]
    istgt_pod: istgt_pod

- name: Generate IOs
  include_tasks: network_ops_on_pod.yaml
  vars:
    action: 'dump_ios'
    targeted_replica_pod: cstor_replicas_pod[1]
    istgt_pod: istgt_pod

- name: block replica 1 from other two replica to prevent rebuild
  include_tasks: network_ops_on_pod.yaml
  vars:
    action: 'disconnect_ip'
    targeted_replica_pod: cstor_replicas_pod[1]
  with_items:
    - cstor_replicas_ip_[0]
    - cstor_replicas_ip[2]
  loop_control:
    loop_var: block_ip

- name: connect replica 1 to target
  include_tasks: network_ops_on_pod.yaml
  vars:
    action: 'connect_target'
    targeted_replica_pod: cstor_replicas_pod[1]
    istgt_pod: istgt_pod
###################################################################


####################################################################
- name: block replica 2 from target
  include_tasks: network_ops_on_pod.yaml
  vars:
    action: 'disconnect_target'
    targeted_replica_pod: cstor_replicas_pod[2]
    istgt_pod: istgt_pod

- name: Generate IOs
  include_tasks: network_ops_on_pod.yaml
  vars:
    action: 'dump_ios'
    targeted_replica_pod: cstor_replicas_pod[2]
    istgt_pod: istgt_pod

- name: block replica 2 from other two replica to prevent rebuild
  include_tasks: network_ops_on_pod.yaml
  vars:
    action: 'disconnect_ip'
    targeted_replica_pod: cstor_replicas_pod[2]
  with_items:
    - cstor_replicas_ip_[0]
    - cstor_replicas_ip[1]
  loop_control:
    loop_var: block_ip

- name: connect replica 2 to target
  include_tasks: network_ops_on_pod.yaml
  vars:
    action: 'connect_target'
    targeted_replica_pod: cstor_replicas_pod[2]
    istgt_pod: istgt_pod
###################################################################
############ ASYNC TASK ##############################

- name: Get replica 1 id
  shell: kubectl get pods {{ cstor_replicas_pod[1] }} -n openebs -o jsonpath='{.spec.containers[*].env[0].value}'
  register: cstor_id
  
- name: unblock rebuilding on replica 2
  include_tasks: network_ops_on_pod.yaml
  vars:
    action: 'connect_ip'
    targeted_replica_pod: cstor_replicas_pod[2]
  with_items:
    - cstor_replicas_ip_[0]
    - cstor_replicas_ip[1]
  loop_control:
    loop_var: blocked_ip

- name: unblock rebuilding on replica 1
  include_tasks: network_ops_on_pod.yaml
  vars:
    action: 'connect_ip'
    targeted_replica_pod: cstor_replicas_pod[1]
  with_items:
    - cstor_replicas_ip_[0]
    - cstor_replicas_ip[2]
  loop_control:
    loop_var: blocked_ip

#INPROGRESS
- name: Wait until rebuild starts on replica 2
  shell: kubectl exec -it {{ cstor_replicas_pod[1] }} -n {{ operator_ns }} --container  cstor-pool -- zfs stats cstor-{{ cstor_id.stdout }}/{{ pv.stdout }} | grep rebuildStatus
  register: rebuild_status
  until: rebuild_status.stdout.find("INPROGRESS") == -1
  retries: 50
  delay: 10


- name: Generate IOs
  shell: >
    kubectl exec {{ pumba_pod.stdout }} -n {{ app_ns }}
    -- pumba --debug netem --interface eth0 -d {{ NETWORK_DELAY }}s loss
    -p 100 re2:^k8s_cstor-pool_{{ targeted_replica_pod }}
  args:
    executable: /bin/bash
  async: 400
  poll: 0
  register: async_results

- pause: seconds=60

- name: block replica 1 from other two replica to prevent rebuild
  include_tasks: network_ops_on_pod.yaml
  vars:
    action: 'disconnect_ip'
    targeted_replica_pod: cstor_replicas_pod[1]
  with_items:
    - cstor_replicas_ip_[0]
    - cstor_replicas_ip[2]
  loop_control:
    loop_var: block_ip


- name: Wait until rebuild starts on replica 2
  shell: kubectl exec -it {{ cstor_replicas_pod[1] }} -n {{ operator_ns }} --container  cstor-pool -- zfs stats cstor-{{ cstor_id.stdout }}/{{ pv.stdout }} | grep rebuildStatus
  register: rebuild_status
  until: rebuild_status.stdout.find("FAILED") == -1
  retries: 50
  delay: 10

- name: Check async task status
  async_status:
    jid: "{{ async_results.ansible_job_id }}"
  register: async_poll_results
  until: async_poll_results.finished
  retries: 30
  delay: 15


- name: bunlock rebuild on replica 2
  include_tasks: network_ops_on_pod.yaml
  vars:
    action: 'connect_ip'
    targeted_replica_pod: cstor_replicas_pod[2]
  with_items:
    - cstor_replicas_ip_[0]
    - cstor_replicas_ip[1]
  loop_control:
    loop_var: blocked_ip
###################################################################
############ replica will connect now.. normal rebuild will happen and then compare the data
######################################################################################################################################################

- name: Wait until all replica becomes healthy
  shell: kubectl exec -it {{ istgt_pod.stdout }} -n {{ operator_ns }} --container  cstor-istgt -- istgtcontrol -q replica |json_pp |grep "\"status" |awk -F ':' '{print $2}' | tr -d ','
  register: replica_status
  until: replica_status.stdout.find("Degraded") == -1
  retries: 50
  delay: 10

- name: Generate snapshot name
  shell: cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1
  register: snapname

- set_fact:
    snap_name: "{{ snapname.stdout }}"

- name: Take snapshot for data verification
  shell: kubectl exec -it {{ istgt_pod.stdout }} -n {{ operator_ns }} --container  cstor-istgt -- istgtcontrol snapcreate {{ pv.stdout }} {{ snap_name }} 30 30
  register: snap_status

- block:
    - name: Install netcat on current host
      shell: apt-get update && apt-get -y install netcat iproute2
      register: dataset

    - include: fetch_data_from_replica.yml
      loop: "{{ cstor_replicas_pod }}"
      loop_control:
        loop_var: rpod

    - set_fact:
        base_replica: "{{ cstor_replicas_pod | list | first }}"

    - name: compare data object
      shell: diff {{ rpod }}.1.dump {{ base_replica }}.1.dump
      loop: "{{ cstor_replicas_pod }}"
      loop_control:
        loop_var: rpod

    - name: compare meta data object
      shell: diff {{ rpod }}.3.dump {{ base_replica }}.3.dump
      loop: "{{ cstor_replicas_pod }}"
      loop_control:
        loop_var: rpod

- name: Destroy snapshot created for data verification
  shell: kubectl exec -it {{ istgt_pod.stdout }} -n {{ operator_ns }} --container  cstor-istgt -- istgtcontrol snapdestroy {{ pv.stdout }} {{ snap_name }} 30 30
  register: snap_status
